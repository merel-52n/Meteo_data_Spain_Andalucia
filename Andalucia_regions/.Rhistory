vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
stations[name] <- vals # add collected values to the corresponding column in the df
}
traceback()
# now we want to calculate margin of error for each station, first create new df
stations <- data.frame(matrix(ncol = num_stations, nrow = round(num_perstation))) # use 31 rows because 31 days, and no. of columns is the amount of unique stations
names <- unique(meteo_ria$station_name) # get the unique names of the stations
colnames(stations) <- names # name the columns after the stations
stations$timestamp <- unique(meteo_ria$timestamp) # get the 31 timestamps used
stations <- relocate(stations, timestamp) # move stations to the start of the df
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
}
View(stations)
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
}
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
}
# now we want to calculate margin of error for each station, first create new df
stations <- data.frame(matrix(ncol = num_stations, nrow = round(num_perstation))) # use 31 rows because 31 days, and no. of columns is the amount of unique stations
names <- unique(meteo_ria$station_name) # get the unique names of the stations
colnames(stations) <- names # name the columns after the stations
stations$timestamp <- unique(meteo_ria$timestamp) # get the 31 timestamps used
stations <- relocate(stations, timestamp) # move stations to the start of the df
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
# if there are less than 31 observations, add NA values to the df to get 31 rows (needs 31 rows to add it to the df)
if (length(vals) < 31) {
print("yes")
m <- 31 - length(vals) # this is the amount of missing values
while (m > 0) {
vals <- c(vals, NA)
m = m-1
}
}
stations[name] <- vals # add collected values to the corresponding column in the df
}
# now we want to calculate margin of error for each station, first create new df
stations <- data.frame(matrix(ncol = num_stations, nrow = round(num_perstation))) # use 31 rows because 31 days, and no. of columns is the amount of unique stations
names <- unique(meteo_ria$station_name) # get the unique names of the stations
colnames(stations) <- names # name the columns after the stations
stations$timestamp <- unique(meteo_ria$timestamp) # get the 31 timestamps used
stations <- relocate(stations, timestamp) # move stations to the start of the df
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
# if there are less than 31 observations, add NA values to the df to get 31 rows (needs 31 rows to add it to the df)
if (length(vals) < 31) {
print("The following station contains NA values:", name)
m <- 31 - length(vals) # this is the amount of missing values
while (m > 0) {
vals <- c(vals, NA)
m = m-1
}
}
stations[name] <- vals # add collected values to the corresponding column in the df
}
# now we want to calculate margin of error for each station, first create new df
stations <- data.frame(matrix(ncol = num_stations, nrow = round(num_perstation))) # use 31 rows because 31 days, and no. of columns is the amount of unique stations
names <- unique(meteo_ria$station_name) # get the unique names of the stations
colnames(stations) <- names # name the columns after the stations
stations$timestamp <- unique(meteo_ria$timestamp) # get the 31 timestamps used
stations <- relocate(stations, timestamp) # move stations to the start of the df
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
# if there are less than 31 observations, add NA values to the df to get 31 rows (needs 31 rows to add it to the df)
if (length(vals) < 31) {
print("The following station contains NA values:")
m <- 31 - length(vals) # this is the amount of missing values
while (m > 0) {
vals <- c(vals, NA)
m = m-1
}
}
stations[name] <- vals # add collected values to the corresponding column in the df
}
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
# if there are less than 31 observations, add NA values to the df to get 31 rows (needs 31 rows to add it to the df)
if (length(vals) < 31) {
print(paste0("The following station contains NA values:", name))
m <- 31 - length(vals) # this is the amount of missing values
while (m > 0) {
vals <- c(vals, NA)
m = m-1
}
}
stations[name] <- vals # add collected values to the corresponding column in the df
}
# now we want to calculate margin of error for each station, first create new df
stations <- data.frame(matrix(ncol = num_stations, nrow = round(num_perstation))) # use 31 rows because 31 days, and no. of columns is the amount of unique stations
names <- unique(meteo_ria$station_name) # get the unique names of the stations
colnames(stations) <- names # name the columns after the stations
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
# if there are less than 31 observations, add NA values to the df to get 31 rows (needs 31 rows to add it to the df)
if (length(vals) < 31) {
print(paste0("The following station contains NA values:", name))
m <- 31 - length(vals) # this is the amount of missing values
while (m > 0) {
vals <- c(vals, NA)
m = m-1
}
}
stations[name] <- vals # add collected values to the corresponding column in the df
}
stations$timestamp <- unique(meteo_ria$timestamp) # get the 31 timestamps used
stations <- relocate(stations, timestamp) # move stations to the start of the df
View(stations)
colSums(is.na(stations))
summary(stations)
# now calculate some statistics per station (assuming normal t-distrib)
n <- length(stations$timestamp) # this is the number of observations
crit_val <- qt(0.975, df=n-1) # get quantile of t distrib, with n-1 degrees of freedom
temp_spain <- data.frame(matrix(ncol = 3, nrow = 0)) # new df with columns for name, geom, temp, margin of error, and each row is a station
for (name in names) {
# calculate mean temperature per station from the 31 observations
mean_temperature <- mean((unlist(stations[name])))
# calculate st dev for t distrib and correspondingly the margin of error using the quantile
std_dev <- sd((unlist(stations[name])))/sqrt(n)
temp_moe <- std_dev * crit_val
# save calculations
results <- c(name, mean_temperature, temp_moe)
temp_spain <- rbind(temp_spain, results)
}
colnames(temp_spain) <- c("station_name", "mean_temperature", "temp_moe")
View(temp_spain)
# TODO add geometry column!!!!
get_stations_info_from('meteo_ria', ria_options)
# TODO add geometry column!!!!
get_stations_info_from('ria', ria_options)
# TODO add geometry column!!!!
info <- get_stations_info_from('ria', ria_options)
temp_spain$station_name == info$station_name
View(info)
select(info, c(station_name, geometry))
info <- select(info, c(station_name, geometry)) # keep only the geometry and name columns
full_join(temp_spain, info, by = geometry)
full_join(temp_spain, info, by = station_name)
full_join(temp_spain, info, by = 'station_name')
alldata <- full_join(temp_spain, info, by = station_name)
left_join(temp_spain, info, by = "station_name")
length(info$station_name)
length(unique(info$station_name))
duplicated(info$station_name)
# TODO add geometry column!!!!
info <- get_stations_info_from('ria', ria_options)
info <- info[!duplicated(info), ]
View(info)
info <- distinct(info)
View(info)
# TODO add geometry column!!!!
info <- get_stations_info_from('ria', ria_options)
info <- select(info, c(station_name, geometry)) # keep only the geometry and name columns
info <- distinct(info)
View(info)
info <- distinct(info, "station_name", keep_all = TRUE)
View(info)
# TODO add geometry column!!!!
info <- get_stations_info_from('ria', ria_options)
info <- select(info, c(station_name, geometry)) # keep only the geometry and name columns
info <- unique(info)
info$station_name <- unique(info$station_name)
shiny::runApp('Documents/I-CISK/uncertainty/RShiny_uncertainty')
library(meteospain)
library(ggplot2)
library(sf)
library(dplyr)
# retrieve meteo data from april-may 2022
ria_options <- ria_options(resolution = 'daily', start_date = as.Date('2022-04-14'), end_date = as.Date('2022-05-14'))
meteo_ria <- get_meteo_from('ria', ria_options)
# check unique number of stations
num_stations <- length(unique(meteo_ria$station_id)) # 101
# check unique number of geometries
length(unique(meteo_ria$geometry)) # matches 101
# get total no. of observations
num_obs <- length(meteo_ria$timestamp)
# calculate number of measurements per station
num_perstation <- num_obs / num_stations # value of num_perstation is 31, so there are 31 measurements per station, so 1 every day of the month
# check which columns contain NA values
colSums(is.na(meteo_ria))
# now we want to calculate margin of error for each station, first create new df
stations <- data.frame(matrix(ncol = num_stations, nrow = round(num_perstation))) # use 31 rows because 31 days, and no. of columns is the amount of unique stations
names <- unique(meteo_ria$station_name) # get the unique names of the stations
colnames(stations) <- names # name the columns after the stations
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
# if there are less than 31 observations, add NA values to the df to get 31 rows (needs 31 rows to add it to the df)
if (length(vals) < 31) {
print(paste0("The following station did not include all observations:", name))
m <- 31 - length(vals) # this is the amount of missing values
while (m > 0) {
vals <- c(vals, NA)
m = m-1
}
}
stations[name] <- vals # add collected values to the corresponding column in the df
}
stations$timestamp <- unique(meteo_ria$timestamp) # get the 31 timestamps used
stations <- relocate(stations, timestamp) # move stations to the start of the df
summary(stations)
colSums(is.na(stations))
# now calculate some statistics per station (assuming normal t-distrib)
n <- length(stations$timestamp) # this is the number of observations
crit_val <- qt(0.975, df=n-1) # get quantile of t distrib, with n-1 degrees of freedom
temp_spain <- data.frame(matrix(ncol = 3, nrow = 0)) # new df with columns for name, geom, temp, margin of error, and each row is a station
for (name in names) {
# calculate mean temperature per station from the 31 observations
mean_temperature <- mean((unlist(stations[name])))
# calculate st dev for t distrib and correspondingly the margin of error using the quantile
std_dev <- sd((unlist(stations[name])))/sqrt(n)
temp_moe <- std_dev * crit_val
# save calculations
results <- c(name, mean_temperature, temp_moe)
temp_spain <- rbind(temp_spain, results)
}
colnames(temp_spain) <- c("station_name", "mean_temperature", "temp_moe")
# now adding the geometry info to the data
info <- get_stations_info_from('ria', ria_options) # get the geometry info
info <- select(info, c(station_name, geometry)) # keep only the geometry and name columns of the data
info <- info %>% distinct(station_name, .keep_all = TRUE) # get rid of duplicate stations
alldata <- left_join(temp_spain, info, by = "station_name") # add the geometry info as a new column to the temp data, matching station names with geometry
View(alldata)
View(alldata)
ggplot(alldata, aes(station_name, mean_temperature))
ggplot(alldata$mean_temperature, aes = station_name)
ggplot(alldata, aes = station_name)
ggplot(alldata, aes = (mean_temperature))
ggplot(alldata, aes = (station_name, mean_temperature))
ggplot(alldata, aes(geometry)
ggplot(alldata, aes(geometry))
ggplot(alldata, aes(alldata$geometry))
# use one of four pre-prepared colour palettes
cmBivPal <- build_palette(name = "CyanMagenta")
view(cmBivPal)
# below, read.uv creates a df that is usable to build a map with the function after
temperature <- read.uv(data = alldata, estimate = "mean_temperature", error = "temp_moe")
# convert geo info to sf object
geodata <- st_as_sf(info <- get_stations_info_from('ria', ria_options))
# create buffer around the points so they can be used as spatial polygons
geodata <- st_buffer(geodata, dist = 3000)
# convert into S4 object
geodata <- as_Spatial(geodata)
# create map using the biv color palette and the poverty df
tempBivMap <- build_bmap(data = temperature, geoData = geodata, id = "station_name")
view(tempBivMap)
## this script gets data from meteospain https://emf.creaf.cat/news/meteospain_available/
library(meteospain)
library(ggplot2)
library(sf)
library(dplyr)
# retrieve meteo data from april-may 2022
ria_options <- ria_options(resolution = 'daily', start_date = as.Date('2022-04-14'), end_date = as.Date('2022-05-14'))
meteo_ria <- get_meteo_from('ria', ria_options)
#check which crs is used
st_crs(meteo_ria)
# check unique number of stations
num_stations <- length(unique(meteo_ria$station_id)) # 101
# check unique number of geometries
length(unique(meteo_ria$geometry)) # matches 101
# get total no. of observations
num_obs <- length(meteo_ria$timestamp)
# calculate number of measurements per station
num_perstation <- num_obs / num_stations # value of num_perstation is 31, so there are 31 measurements per station, so 1 every day of the month
# check which columns contain NA values
colSums(is.na(meteo_ria))
# now we want to calculate margin of error for each station, first create new df
stations <- data.frame(matrix(ncol = num_stations, nrow = round(num_perstation))) # use 31 rows because 31 days, and no. of columns is the amount of unique stations
names <- unique(meteo_ria$station_name) # get the unique names of the stations
colnames(stations) <- names # name the columns after the stations
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
# if there are less than 31 observations, add NA values to the df to get 31 rows (needs 31 rows to add it to the df)
if (length(vals) < 31) {
print(paste0("The following station did not include all observations:", name))
m <- 31 - length(vals) # this is the amount of missing values
while (m > 0) {
vals <- c(vals, NA)
m = m-1
}
}
stations[name] <- vals # add collected values to the corresponding column in the df
}
stations$timestamp <- unique(meteo_ria$timestamp) # get the 31 timestamps used
stations <- relocate(stations, timestamp) # move stations to the start of the df
summary(stations)
colSums(is.na(stations))
# now calculate some statistics per station (assuming normal t-distrib)
n <- length(stations$timestamp) # this is the number of observations
crit_val <- qt(0.975, df=n-1) # get quantile of t distrib, with n-1 degrees of freedom
temp_spain <- data.frame(matrix(ncol = 3, nrow = 0)) # new df with columns for name, geom, temp, margin of error, and each row is a station
for (name in names) {
# calculate mean temperature per station from the 31 observations
mean_temperature <- mean((unlist(stations[name])))
# calculate st dev for t distrib and correspondingly the margin of error using the quantile
std_dev <- sd((unlist(stations[name])))/sqrt(n)
temp_moe <- std_dev * crit_val
# save calculations
results <- c(name, mean_temperature, temp_moe)
temp_spain <- rbind(temp_spain, results)
}
colnames(temp_spain) <- c("station_name", "mean_temp", "temp_moe")
# now adding the geometry info to the data
info <- get_stations_info_from('ria', ria_options) # get the geometry info
info <- select(info, c(station_name, geometry)) # keep only the geometry and name columns of the data
info <- info %>% distinct(station_name, .keep_all = TRUE) # get rid of duplicate stations
alldata <- left_join(temp_spain, info, by = "station_name") # add the geometry info as a new column to the temp data, matching station names with geometry
### now plotting
library(Vizumap)
library(sf)
# use one of four pre-prepared colour palettes
cmBivPal <- build_palette(name = "CyanMagenta")
view(cmBivPal)
# below, read.uv creates a df that is usable to build a map with the function after
temperature <- read.uv(data = alldata, estimate = "mean_temp", error = "temp_moe")
# convert geo info to sf object
geodata <- st_as_sf(info <- get_stations_info_from('ria', ria_options))
# create buffer around the points so they can be used as spatial polygons
geodata <- st_buffer(geodata, dist = 3000)
# convert into S4 object
geodata <- as_Spatial(geodata)
# create map using the biv color palette and the poverty df
tempBivMap <- build_bmap(data = temperature, geoData = geodata, id = "station_name")
view(tempBivMap)
# create key
tempBivKey <- build_bkey(data = temperature)
view(tempBivKey)
# now plot them together
attach_key(tempBivMap, tempBivKey)
ggplot(alldata, aes = mean_temperature)
View(alldata)
ggplot(alldata, aes(mean_temperature, station_name))
ggplot(alldata, aes(geometry))
ggplot(alldata$geometry, aes(mean_temperature))
ggplot() + geom_sf(data = alldata, aes(fill = mean_temperature), linewidth = 0.4)
ggplot(alldata$geometry)
ggplot(alldata)
ggplot(st_as_sf(alldata))
plot(st_geometry(alldata))
## this script gets data from meteospain https://emf.creaf.cat/news/meteospain_available/
library(meteospain)
library(ggplot2)
library(sf)
library(dplyr)
# retrieve meteo data from april-may 2022
ria_options <- ria_options(resolution = 'daily', start_date = as.Date('2022-04-14'), end_date = as.Date('2022-05-14'))
meteo_ria <- get_meteo_from('ria', ria_options)
#check which crs is used
st_crs(meteo_ria)
# check unique number of stations
num_stations <- length(unique(meteo_ria$station_id)) # 101
# check unique number of geometries
length(unique(meteo_ria$geometry)) # matches 101
# get total no. of observations
num_obs <- length(meteo_ria$timestamp)
# calculate number of measurements per station
num_perstation <- num_obs / num_stations # value of num_perstation is 31, so there are 31 measurements per station, so 1 every day of the month
# check which columns contain NA values
colSums(is.na(meteo_ria))
# now we want to calculate margin of error for each station, first create new df
stations <- data.frame(matrix(ncol = num_stations, nrow = round(num_perstation))) # use 31 rows because 31 days, and no. of columns is the amount of unique stations
names <- unique(meteo_ria$station_name) # get the unique names of the stations
colnames(stations) <- names # name the columns after the stations
# now per station, collect the mean temperature values
for (name in colnames(stations) ) { # iterate over each station
vals <- c()
for (i in 1:length(meteo_ria$timestamp)) {
if (meteo_ria$station_name[i] == name) {
vals <- c(vals, meteo_ria$mean_temperature[i])
}
}
# if there are less than 31 observations, add NA values to the df to get 31 rows (needs 31 rows to add it to the df)
if (length(vals) < 31) {
print(paste0("The following station did not include all observations:", name))
m <- 31 - length(vals) # this is the amount of missing values
while (m > 0) {
vals <- c(vals, NA)
m = m-1
}
}
stations[name] <- vals # add collected values to the corresponding column in the df
}
stations$timestamp <- unique(meteo_ria$timestamp) # get the 31 timestamps used
stations <- relocate(stations, timestamp) # move stations to the start of the df
summary(stations)
colSums(is.na(stations))
# now calculate some statistics per station (assuming normal t-distrib)
n <- length(stations$timestamp) # this is the number of observations
crit_val <- qt(0.975, df=n-1) # get quantile of t distrib, with n-1 degrees of freedom
temp_spain <- data.frame(matrix(ncol = 3, nrow = 0)) # new df with columns for name, geom, temp, margin of error, and each row is a station
for (name in names) {
# calculate mean temperature per station from the 31 observations
mean_temperature <- mean((unlist(stations[name])))
# calculate st dev for t distrib and correspondingly the margin of error using the quantile
std_dev <- sd((unlist(stations[name])))/sqrt(n)
temp_moe <- std_dev * crit_val
# save calculations
results <- c(name, mean_temperature, temp_moe)
temp_spain <- rbind(temp_spain, results)
}
colnames(temp_spain) <- c("station_name", "mean_temp", "temp_moe")
# now adding the geometry info to the data
info <- get_stations_info_from('ria', ria_options) # get the geometry info
info <- select(info, c(station_name, geometry)) # keep only the geometry and name columns of the data
info <- info %>% distinct(station_name, .keep_all = TRUE) # get rid of duplicate stations
alldata <- left_join(temp_spain, info, by = "station_name") # add the geometry info as a new column to the temp data, matching station names with geometry
plot(st_geometry(alldata))
library(Vizumap)
library(sf)
# use one of four pre-prepared colour palettes
cmBivPal <- build_palette(name = "CyanMagenta")
view(cmBivPal)
# below, read.uv creates a df that is usable to build a map with the function after
temperature <- read.uv(data = alldata, estimate = "mean_temp", error = "temp_moe")
# convert geo info to sf object
geodata <- st_as_sf(info <- get_stations_info_from('ria', ria_options))
# create buffer around the points so they can be used as spatial polygons
geodata <- st_buffer(geodata, dist = 3000)
# convert into S4 object
geodata <- as_Spatial(geodata)
# create map using the biv color palette and the poverty df
tempBivMap <- build_bmap(data = temperature, geoData = geodata, id = "station_name")
view(tempBivMap)
# create key
tempBivKey <- build_bkey(data = temperature)
view(tempBivKey)
# now plot them together
attach_key(tempBivMap, tempBivKey)
# read in spain-andalucia shapefile
setwd("/home/merel/Documents/I-CISK/meteo/data/shape/Andalucia_regions/")
andalucia <- st_read("13_23_DemarcacionCEPS.shp")
# check the projection
st_crs(andalucia) # so its ETRS89, need to convert to WGS84
andalucia <- st_transform(andalucia, crs = st_crs(meteo_ria)) # take the crs from meteo ria to transform the data into
# have a look at the shape
plot(andalucia$geometry)
plot(temperature$geometry)
ggplot() + geom_sf(andalucia)
ggplot() + geom_sf(data = andalucia$geometry)
ggplot() + geom_sf(data = andalucia$geometry) + geom_sf(data = temperature$geometry)
# have a look at the shape
ggplot() + geom_sf(data = andalucia$geometry) + geom_sf(data = meteo_ria$geometry)
ggplot() + geom_sf(data = meteo_ria$geometry)
andalucia <- st_read("13_23_DemarcacionCEPS.shp")
# have a look at the shape
ggplot() + geom_sf(data = andalucia$geometry) + geom_sf(data = meteo_ria$geometry)
andalucia <- st_transform(andalucia, crs = st_crs(meteo_ria)) # take the crs from meteo ria to transform the data into
# have a look at the shape
ggplot() + geom_sf(data = andalucia$geometry) + geom_sf(data = meteo_ria$geometry)
